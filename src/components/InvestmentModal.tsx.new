import { useState, useEffect } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Slider } from "@/components/ui/slider";
import { Coins, TrendingUp, AlertCircle, Info } from "lucide-react";
import { toast } from "sonner";

// Import the AI integration
import { generateAIResponse } from "@/lib/watsonx";

interface InvestmentModalProps {
  isOpen: boolean;
  onClose: () => void;
  creator: {
    name: string;
    handle: string;
    avatar: string;
    minInvestment: number;
  };
}

// Helper functions for generating default advice
const getDefaultAdvice = (creatorName: string, minInvestment: number, maxInvestment: number): string => {
  // Generate different advice options to add variety
  const adviceOptions = [
    `Based on ${creatorName}'s profile, investing ${minInvestment} tokens could offer a good entry point. Consider increasing your investment based on performance metrics.`,
    `${creatorName} shows potential for growth. Start with ${minInvestment} tokens and monitor engagement rates before considering additional investment.`,
    `A balanced approach of ${Math.round((minInvestment + maxInvestment) / 3)} tokens provides reasonable exposure to ${creatorName}'s growth while managing risk.`
  ];
  
  // Select a random advice option
  return adviceOptions[Math.floor(Math.random() * adviceOptions.length)];
};

export const InvestmentModal = ({
  isOpen,
  onClose,
  creator,
}: InvestmentModalProps) => {
  const [investment, setInvestment] = useState(creator.minInvestment);
  const [advice, setAdvice] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const maxInvestment = 500;
  const potentialReturn = investment * 1.8;
  const stakePercentage = (investment / 1000) * 100;

  // Handle investment confirmation
  const handleInvest = () => {
    toast.success("Investment Successful!", {
      description: `You've backed ${creator.name} with ${investment} tokens`,
    });
    onClose();
  };

  // Get AI advice about the investment
  useEffect(() => {
    // Only try to get advice if the modal is open and we don't already have advice
    if (isOpen && !advice && !loading) {
      try {
        getInvestmentAdvice();
      } catch (error) {
        console.error('Error initiating investment advice:', error);
        // Set a fallback advice if there's an error
        setAdvice(`Consider investing in ${creator.name} based on their profile metrics.`);
        setLoading(false);
      }
    }
  }, [isOpen, creator.name, advice, loading]);

  const getInvestmentAdvice = async () => {
    try {
      setLoading(true);
      
      // If skipAI parameter is present, use default advice without API call
      if (window.location.search.includes('skipAI=true')) {
        setTimeout(() => {
          setAdvice(getDefaultAdvice(creator.name, creator.minInvestment, maxInvestment));
          setLoading(false);
        }, 1000);
        return;
      }
      
      const prompt = `
        You are a financial advisor on a platform where users can invest in social media creators.
        Please provide a very brief (2-3 sentences) advice about investing in ${creator.name}.
        Consider that the minimum investment is ${creator.minInvestment} tokens and the maximum is ${maxInvestment} tokens.
        Keep your advice professional, concise, and focused on potential growth.
        Be direct and avoid phrases like 'as an AI' or 'I would recommend'.
      `;
      
      // Add a timeout to prevent waiting too long
      const timeoutPromise = new Promise<string>((_, reject) => {
        setTimeout(() => reject(new Error('AI request timed out')), 12000);
      });
      
      // Race between the AI request and the timeout
      const response = await Promise.race([
        generateAIResponse(prompt), // This will try Watson X first, then fall back to Gemini
        timeoutPromise
      ]);
      
      setAdvice(response);
    } catch (error) {
      console.error("Error getting investment advice:", error);
      // Set a default advice if all AI methods fail
      setAdvice(getDefaultAdvice(creator.name, creator.minInvestment, maxInvestment));
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-md glass-card">
        <DialogHeader>
          <DialogTitle className="text-2xl">Back {creator.name}</DialogTitle>
          <DialogDescription>
            Invest tokens to secure your stake in their success
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6 py-4">
          {/* Creator Info */}
          <div className="flex items-center gap-3 p-4 rounded-lg glass">
            <img
              src={creator.avatar}
              alt={creator.name}
              className="w-12 h-12 rounded-full"
            />
            <div>
              <div className="font-semibold">{creator.name}</div>
              <div className="text-sm text-muted-foreground">{creator.handle}</div>
            </div>
          </div>

          {/* AI Investment Advice */}
          {advice && (
            <div className="p-4 rounded-lg glass bg-blue-900/20">
              <div className="flex gap-2 items-start">
                <Info className="w-5 h-5 text-blue-400 flex-shrink-0 mt-1" />
                <div>
                  <p className="text-sm font-medium text-blue-300 mb-1">Investment Analysis</p>
                  <p className="text-sm">{advice}</p>
                  {!window.location.search.includes('skipAI=true') && 
                   !advice.includes('tokens') && 
                   !advice.includes('potential for growth') && (
                    <p className="text-xs text-blue-200/70 mt-2">Powered by AI</p>
                  )}
                </div>
              </div>
            </div>
          )}

          {/* Investment Slider */}
          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <label className="text-sm font-medium">Investment Amount</label>
              <div className="flex items-center gap-2 text-2xl font-bold">
                <Coins className="w-5 h-5 text-accent" />
                {investment}
              </div>
            </div>
            <Slider
              value={[investment]}
              onValueChange={(value) => setInvestment(value[0])}
              min={creator.minInvestment}
              max={maxInvestment}
              step={10}
              className="py-4"
            />
            <div className="flex justify-between text-xs text-muted-foreground">
              <span>Min: {creator.minInvestment}</span>
              <span>Max: {maxInvestment}</span>
            </div>
          </div>

          {/* Investment Details */}
          <div className="space-y-3 p-4 rounded-lg glass">
            <div className="flex justify-between">
              <span className="text-sm text-muted-foreground">Your Stake</span>
              <span className="text-sm font-semibold">{stakePercentage.toFixed(2)}%</span>
            </div>
            <div className="flex justify-between">
              <span className="text-sm text-muted-foreground">Potential Return</span>
              <span className="text-sm font-semibold text-accent flex items-center gap-1">
                <TrendingUp className="w-3 h-3" />
                {potentialReturn.toFixed(0)} tokens (+80%)
              </span>
            </div>
          </div>

          {/* Warning */}
          <div className="flex gap-2 p-3 rounded-lg glass">
            <AlertCircle className="w-4 h-4 text-warning flex-shrink-0 mt-0.5" />
            <p className="text-xs text-muted-foreground">
              Returns are estimates based on creator potential. Actual returns may vary.
            </p>
          </div>

          {/* Actions */}
          <div className="flex gap-3">
            <Button variant="outline" onClick={onClose} className="flex-1 glass-button">
              Cancel
            </Button>
            <Button 
              onClick={handleInvest} 
              className="flex-1 glass-button shadow-glow"
              disabled={loading}
            >
              {loading ? "Analyzing..." : "Confirm Investment"}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};
